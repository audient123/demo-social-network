{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","isOwner","Preloader","className","s","descriptionBlock","src","photos","large","userPhoto","mainPhoto","type","target","files","length","savePhoto","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostForm","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","reduxForm","form","MyPosts","memo","postsElements","posts","reverse","map","p","postsBlock","values","addPost","newPostText","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.32bd401b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3ZasY\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3a3Gx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__30Sh3\",\"posts\":\"MyPosts_posts__3ZfH7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2A4ZV\"};","import React, {useEffect, useState} from 'react';\r\n\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={setEditMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {savePhoto} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto (e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n\r\n)\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n\r\n            <img src=\"\"/>\r\n            Post {props.message} like{props.likesCount}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {PureComponent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name='newPostText' component={Textarea} placeholder={'Post message'}\r\n                   validate={[required, maxLength10]}/>\r\n        </div>\r\n\r\n        <div>\r\n            <button>\r\n                Add post\r\n            </button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nAddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n\r\n    //делаем порядок постов реверсивным\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer);\r\n\r\n"],"sourceRoot":""}